#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//int main()
//{
//	//int a = 7 / 2;
//	//int b = 7 % 2;//取模/余
//	//printf("%d\n", a);
//	//printf("%d\n", b);
//	//float f = 7 / 2.0;
//
//	printf("%f\n", f);
//
//	return 0;
//}

//
//int main()
//{
//	//12
//	int a = 12;//a是整型，4个字节，32bit
//	int b = a << 1;//左移操作符
//	//负数，右移>>
//	// 
//	//00000000000000000000000000001100
//	//
//	//移动的二进制位
//	//
//	printf("b = %d\n", b);
//
//	return 0;
//}

//int main()
//{
//	int a = 3;
//	int b = 5;
//	//00000000000000000000000000000011
//	//00000000000000000000000000000101
//	//00000000000000000000000000000110
//	// 	   
//	//int c = a & b;//按位与 - 对应的二进制位有0则为0，两个同时为1，才是1
//	//int c = a | b;//按位或 - 对应的二级制为有1则为1，两个同时为0，才是0
//	int c = a ^ b;//按位异或 - 相同为0，相异为1
//
//	printf("%d\n", c);
//
//	return 0;
//}

//
//
//int main()
//{
//	//int a = 10;//初始化
//	//float score = 0.0;
//	//a = 45;//赋值
//	//score = 95.4f;//95.5 直接写出来的浮点数默认是double类型的
//	////95.5f - 指定为float类型
//
//	int a = 10;
//	a = a + 5;//1
//	a += 5;   //2 复合赋值符
//
//	a -= 4;
//	a *= 5;
//
//
//	return 0;
//}
//
//int main()
//{
//	//3 + 5;//+ 操作符
//	//3 和 5 是操作数
//	//3是左操作数
//	//5是右操作数
//	//+ 双目操作符
//
//	//单目操作符 - 只有一个操作数的操作符
//
//	int flag = 0;
//	//C语言是如何表示真假的？
//	//0就是假，非0就是真
//
//	//flag为真就打印hehe
//	//if (flag)
//	//{
//	//	printf("hehe\n");
//	//}
//	////flag为假打印haha
//	//if (!flag)
//	//{
//	//	printf("haha\n");
//	//}
//
//	int b = !flag;
//	printf("%d\n", b);
//
//	return 0;
//}


//int main()
//{
//	int a = -10;
//	//a = -a;
//
//	int b = +a;
//	printf("%d\n", b);
//
//	return 0;
//}

//
//sizeof 是操作符  不是函数
//操作符 - 运算符
//
//
//int main()
//{
//	int a = 10;
//	int arr[10] = {0};
//	printf("%d\n", sizeof(int));//4
//	printf("%d\n", sizeof(a));//4
//	printf("%d\n", sizeof a);//4
//	int sz = sizeof(arr) / sizeof(arr[0]);
//
//	printf("%d\n", sz);//10
//	printf("%d\n", sizeof(arr));//40
//	printf("%d\n", sizeof(arr[0]));//4
//
//	return 0;
//}

//~ - 按（2进制）位取反
//如果一个整数存储在内存中的二进制序列是：
//00010101001010101000101010100010
//11101010110101010111010101011101

//
//计算机识别的二进制
//整数存放在内存中也存放的是二进制
//整数在内存中存放的是二进制的补码
// 
//整数的二进制怎么表示？

//整数的二进制表示方式有3种：
//原码 - 直接按照数字的正负转换成二进制就是原码
//反码 - 原码的符号位不变，其他为按位取反，就是反码
//补码 - 反码+1,就是补码

//正整数的原码、反码、补码相同
//负证书的原码、反码、补码要计算

//规定：
//对于有符号整数，二进制的最高位是符号位
//最高位是0，表示正数
//最高位是1，表示负数
//
//int main()
//{
//	//int a = 0;//32bit
//	//0000000000000000000000000000000 - 原码
//	//0000000000000000000000000000000 - 反码
//	//0000000000000000000000000000000 - 补码
//	//int b = -1;
//	//1000000000000000000000000000001 - 原码
//	//1111111111111111111111111111110 - 反码
//	//1111111111111111111111111111111 - 补码
//
//	int a = 0;
//	//0000000000000000000000000000000 - 补码
//	//1111111111111111111111111111111 - 取反后的结果
//	//1111111111111111111111111111110 - 反码
//	//1000000000000000000000000000001 - 原码
//
//	printf("%d\n", ~a);//-1
//	//?
//
//	return 0;
//}
//
//

//
//int main()
//{
//	//++ --
//	int a = 10;
//	//int b = a++;//后置++，先使用，再++
//	//int b = ++a;  //前置++，先++，后使用
//	int b = --a;
//
//	printf("%d\n", a);//
//	printf("%d\n", b);//
//
//	return 0;
//}
//
//#include <stdio.h>
//
//int main()
//{
//	int a = 1;
//	int b = (++a) + (++a) + (++a);
//	
//	printf("b = %d\n", b);
//
//	return 0;
//}
//

//int main()
//{
//	int a = (int)3.14;//double --> int
//
//	printf("%d\n", a);
//
//	return 0;
//}

//int main()
//{
//	int a = (3 > 5);
//	printf("%d\n", a);
//	if (3 > 5)
//	{
//		printf("hehe\n");
//	}
//
//	return 0;
//}
//
//int main()
//{
//	//法定结婚年龄
//	//男：22
//	//女：20
//	//A B
//	int A = 25;
//	int B = 19;
//	//&& 逻辑与 - 并且
//	if ((A >= 22) && (B >= 20))
//	{
//			
//	}
//	//|| 逻辑或 - 或者
//
//	return 0;
//}

//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int max = 0;
//	
//	//if (a > b)
//	//	max = a;
//	//else
//	//	max = b;
//	
//	//条件操作符
//	max = (a > b) ? (a) : (b);
//
//	printf("%d\n", max);
//
//	return 0;
//}

//逗号操作符

//int main()
//{
//	int a = 3;
//	int b = 5;
//	int c = 6;
//	//逗号表达式 - 从左向右依次计算，整个表达式的结果是最后一个表达式的结果。
//	int d = (a -= 2, b = a + c, c = a - b);
//	//       a=1     b=7        c=-6
//	printf("%d\n", d);
//	return 0;
//}

//int 表示函数调用完成之后返回一个整数
//int Add(int x, int y)
//{
//	int z = x + y;
//	return z;
//}
//
////void 是无的意思
////就是说函数test,调用完成之后什么都不返回
//void test()
//{
//	printf("test\n");
//}
//
//int main()
//{
//	//int arr[10] = { 1,2,3,4,5,6 };
//	//arr[4];//[] - 就是下标引用操作符
//	//[] 的 操作数是arr, 4
//
//	int a = 10;
//	int b = 20;
//	//函数调用，() 就是函数调用的操作符
//	int sum = Add(a, b);
//	//() 的操作数是  Add, a, b
//	printf("sum = %d\n", sum);
//	test();//() 函数调用操作符
//	//() 的操作数 test
//	return 0;
//}

//
//int flaot for while return 
//C语言规定的关键字
//

//typedef unsigned int uint;
//
//int main()
//{
//	//int a = 10;//auto
//	unsigned int age = 10;
//	uint age2 = 20;
//
//	return 0;
//}

//static 有3种用法
//1, static修饰局部变量
// 使得局部变量出了自己的范围也不销毁，其实是改变了局部变量的生命周期
// 但是作用域还是局部的。
// 
//2. static修饰全局变量
// 全局变量本身是具有外部链接属性
// 但是static修饰全局变量，会使得全局变量失去外部链接属性
// 变成内部链接属性
// 所以static修饰的全局变量，只能在自己所在的.c文件中使用
// 
//3. static修饰函数
//函数默认是具有外部链接属性
//但是被static修饰之后，会使得函数失去外部链接属性
//变成了内部链接属性
//所以static修饰的函数只能在自己所在的.c文件内部使用
// 不能在其他文件使用
//void test()
//{
//	static int a = 1;
//	a++;
//	printf("%d ", a);
//}
//
//int main()
//{
//	int i = 0;
//	while (i < 10)
//	{
//		test();
//		i++;
//	}
//	return 0;
//}



//声明外部变量
//extern int g_val;
//
//int main()
//{
//	printf("%d\n", g_val);
//
//	return 0;
//}

//声明外部符号
extern int Add(int x, int y);

int main()
{
	int a = 10;
	int b = 20;
	int ret = Add(a, b);
	printf("%d\n", ret);

	return 0;
}